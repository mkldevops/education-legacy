{% trans_default_domain 'student' %}

<div x-data="classPeriodModal()" 
     x-on:open-class-modal.window="openModal($event.detail)"
     class="relative">
    
    <!-- Modal -->
    <div x-show="isOpen" 
         x-transition:enter="ease-out duration-300"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="ease-in duration-200"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="fixed inset-0 z-50 overflow-y-auto"
         x-cloak>
        
        <!-- Background overlay -->
        <div class="flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div x-show="isOpen"
                 x-transition:enter="ease-out duration-300"
                 x-transition:enter-start="opacity-0"
                 x-transition:enter-end="opacity-100"
                 x-transition:leave="ease-in duration-200"
                 x-transition:leave-start="opacity-100"
                 x-transition:leave-end="opacity-0"
                 @click="closeModal()"
                 class="fixed inset-0 bg-gray-500/75 transition-opacity"></div>

            <span class="hidden sm:inline-block sm:h-screen sm:align-middle" aria-hidden="true">&#8203;</span>

            <!-- Modal panel -->
            <div x-show="isOpen"
                 x-transition:enter="ease-out duration-300"
                 x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                 x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
                 x-transition:leave="ease-in duration-200"
                 x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
                 x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                 @click.stop
                 class="inline-block w-full max-w-lg transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:align-middle">
                
                <!-- Header -->
                <div class="flex items-center justify-between border-b border-gray-200 px-6 py-4">
                    <div>
                        <h2 class="text-lg font-semibold text-gray-900">{{ 'modal.classperiod.change'|trans }}</h2>
                        <p x-show="selectedStudentId" x-text="`Étudiant #${selectedStudentId}`" class="mt-1 text-xs text-gray-500"></p>
                    </div>
                    <button type="button" 
                            @click="closeModal()"
                            class="rounded-full p-1 text-gray-400 transition hover:text-gray-600">
                        <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                <!-- Content -->
                <div class="space-y-4 px-6 py-5">
                    <!-- Success message -->
                    <div x-show="successMessage" 
                         x-text="successMessage"
                         class="rounded-lg border border-green-200 bg-green-50 px-4 py-3 text-sm text-green-700"></div>

                    <!-- Error message -->
                    <div x-show="errorMessage" 
                         x-text="errorMessage"
                         class="rounded-lg border border-red-200 bg-red-50 px-4 py-3 text-sm text-red-700"></div>

                    <!-- Class selection -->
                    <div x-show="availableClasses.length > 0">
                        <label for="classperiod-select" class="block text-sm font-medium text-gray-700">
                            {{ 'modal.classperiod.choose'|trans }}
                        </label>
                        <select id="classperiod-select"
                                x-model="selectedClassPeriodId"
                                class="mt-2 block w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">{{ 'modal.classperiod.choose'|trans }}</option>
                            <template x-for="classPeriod in availableClasses" :key="classPeriod.id">
                                <option :value="classPeriod.id" x-text="`${classPeriod.name} (${classPeriod.studentCount} élèves)`"></option>
                            </template>
                        </select>
                    </div>

                    <!-- No classes available -->
                    <div x-show="availableClasses.length === 0">
                        <p class="text-sm text-gray-500">{{ 'list.modal.nothing_class'|trans }}</p>
                    </div>
                </div>

                <!-- Footer -->
                <div class="flex items-center justify-end space-x-3 bg-gray-50 px-6 py-4">
                    <button type="button"
                            @click="closeModal()"
                            :disabled="isSubmitting"
                            class="inline-flex items-center rounded-md border border-gray-300 px-4 py-2 text-sm font-medium text-gray-700 transition hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50">
                        <svg class="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                        {{ 'modal.close'|trans }}
                    </button>

                    <button type="button"
                            x-show="availableClasses.length > 0"
                            @click="changeClass()"
                            :disabled="!selectedClassPeriodId || isSubmitting"
                            :class="(!selectedClassPeriodId || isSubmitting) ? 'cursor-not-allowed bg-blue-300' : 'bg-blue-600 hover:bg-blue-700'"
                            class="inline-flex items-center rounded-md border border-transparent px-4 py-2 text-sm font-medium text-white transition focus:outline-none focus:ring-2 focus:ring-blue-500">
                        
                        <span x-show="isSubmitting" class="mr-2 inline-flex h-4 w-4 items-center justify-center">
                            <span class="h-3 w-3 animate-spin rounded-full border-2 border-white border-t-transparent"></span>
                        </span>
                        
                        <svg x-show="!isSubmitting" class="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                        
                        <span x-text="isSubmitting ? 'Enregistrement...' : '{{ 'modal.save'|trans|default('Enregistrer') }}'"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function classPeriodModal() {
    return {
        isOpen: false,
        selectedStudentId: null,
        selectedClassPeriodId: '',
        isSubmitting: false,
        successMessage: '',
        errorMessage: '',
        availableClasses: [],

        async openModal(data) {
            this.resetState();
            this.selectedStudentId = data.studentId;
            this.isOpen = true;
            
            try {
                const response = await fetch(`{{ path('app_api_class_periods') }}?studentId=${data.studentId}`);
                const result = await response.json();
                
                if (result.success) {
                    this.availableClasses = result.classPeriods;
                    this.selectedClassPeriodId = result.currentClassPeriodId || '';
                } else {
                    this.errorMessage = result.message || 'Erreur lors du chargement des classes';
                }
            } catch (error) {
                this.errorMessage = 'Erreur de connexion';
                console.error('Error loading class periods:', error);
            }
        },

        closeModal() {
            this.isOpen = false;
            setTimeout(() => this.resetState(), 300);
        },

        async changeClass() {
            if (!this.selectedStudentId || !this.selectedClassPeriodId) {
                this.errorMessage = 'Veuillez sélectionner une classe.';
                return;
            }

            this.isSubmitting = true;
            this.errorMessage = '';
            this.successMessage = '';

            try {
                const response = await fetch('{{ path('app_api_change_student_class') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        studentId: this.selectedStudentId,
                        classPeriodId: this.selectedClassPeriodId
                    })
                });

                const result = await response.json();

                if (result.success) {
                    this.successMessage = result.message || 'Classe modifiée avec succès !';
                    
                    // Update the UI
                    this.updateStudentRow(result.student);
                    
                    // Close modal after delay
                    setTimeout(() => this.closeModal(), 1500);
                } else {
                    this.errorMessage = result.message || 'Erreur lors de la modification';
                }
            } catch (error) {
                this.errorMessage = 'Erreur de connexion';
                console.error('Error changing class:', error);
            } finally {
                this.isSubmitting = false;
            }
        },

        updateStudentRow(studentData) {
            const row = document.querySelector(`#student-${this.selectedStudentId}`);
            if (row && studentData.classPeriod) {
                const classCell = row.querySelector('.class-period');
                if (classCell) {
                    // Update the class display
                    classCell.innerHTML = `
                        <div class="flex items-center justify-center space-x-2">
                            <a href="/class-period/${studentData.classPeriod.id}" 
                               class="inline-flex items-center px-2.5 py-1.5 rounded-md text-sm font-medium bg-green-100 text-green-800 hover:bg-green-200 transition-colors duration-200">
                                <svg class="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
                                </svg>
                                ${studentData.classPeriod.name}
                            </a>
                            <button type="button"
                                    class="p-1.5 rounded-full hover:bg-gray-100 transition-colors duration-200"
                                    @click="$dispatch('open-class-modal', { studentId: ${this.selectedStudentId} })">
                                <svg class="w-4 h-4 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                                </svg>
                            </button>
                        </div>
                    `;
                }
            }
        },

        resetState() {
            this.selectedStudentId = null;
            this.selectedClassPeriodId = '';
            this.isSubmitting = false;
            this.successMessage = '';
            this.errorMessage = '';
            this.availableClasses = [];
        }
    }
}
</script>