<div x-data="{ showModal: false }">
    <!-- Trigger Button -->
    <button
        type="button"
        @click="showModal = true"
        class="{{ triggerButtonClass }}"
    >
        {{ ux_icon('bi:cloud-upload', {class: 'w-4 h-4'}) }}
        {{ triggerButtonText }}
    </button>

    <!-- Modal -->
    <div
        x-show="showModal"
        x-cloak
        @click.away="showModal = false"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
        class="fixed inset-0 z-50 overflow-y-auto"
        style="display: none;"
    >
        <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <!-- Background overlay -->
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

            <!-- Center modal -->
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen">&#8203;</span>

            <div
                @click.stop
                class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full"
                x-data="{
                    files: [],
                    isDragging: false,
                    isUploading: false,
                    uploadProgress: 0,
                    uploadedFiles: [],
                    errors: [],
                    maxFileSize: {{ maxFileSizeBytes }},
                    acceptedTypes: {{ acceptedTypesArray|json_encode|raw }},
                    multiple: {{ multiple ? 'true' : 'false' }},

                    onDragOver(event) {
                        event.preventDefault();
                        this.isDragging = true;
                    },

                    onDragLeave(event) {
                        event.preventDefault();
                        this.isDragging = false;
                    },

                    onDrop(event) {
                        event.preventDefault();
                        this.isDragging = false;
                        const droppedFiles = Array.from(event.dataTransfer.files);
                        this.handleFiles(droppedFiles);
                    },

                    onFileSelect(event) {
                        const selectedFiles = Array.from(event.target.files);
                        this.handleFiles(selectedFiles);
                    },

                    handleFiles(newFiles) {
                        this.errors = [];

                        newFiles.forEach(file => {
                            // Validation de la taille
                            if (file.size > this.maxFileSize) {
                                this.errors.push(`Le fichier \${file.name} est trop volumineux. Taille maximum: {{ maxFileSize }}MB`);
                                return;
                            }

                            // Validation du type
                            const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
                            if (!this.acceptedTypes.includes(fileExtension)) {
                                this.errors.push(`Le type de fichier \${file.name} n'est pas accepté. Types acceptés: {{ acceptedTypes }}`);
                                return;
                            }

                            if (this.multiple) {
                                this.files.push(file);
                            } else {
                                this.files = [file];
                            }
                        });
                    },

                    removeFile(index) {
                        this.files.splice(index, 1);
                    },

                    async uploadFiles() {
                        if (this.files.length === 0) return;

                        this.isUploading = true;
                        this.uploadProgress = 0;
                        this.errors = [];

                        const formData = new FormData();
                        this.files.forEach((file, index) => {
                            formData.append(this.multiple ? `files[${index}]` : 'file', file);
                        });

                        try {
                            const response = await fetch('{{ uploadUrl }}', {
                                method: 'POST',
                                body: formData
                            });

                            if (!response.ok) {
                                throw new Error('Erreur lors de l\'upload');
                            }

                            const result = await response.json();
                            this.uploadedFiles = result.files || [];
                            this.uploadProgress = 100;

                            // Callback de succès
                            {% if successCallback %}
                            if (typeof window['{{ successCallback }}'] === 'function') {
                                window['{{ successCallback }}'](result);
                            }
                            {% endif %}

                            // Réinitialiser et fermer
                            setTimeout(() => {
                                this.files = [];
                                this.uploadProgress = 0;
                                this.isUploading = false;
                                showModal = false;
                            }, 1000);

                        } catch (error) {
                            this.errors.push(error.message);
                            this.isUploading = false;

                            {% if errorCallback %}
                            if (typeof window['{{ errorCallback }}'] === 'function') {
                                window['{{ errorCallback }}'](error);
                            }
                            {% endif %}
                        }
                    }
                }"
            >
                <!-- Modal Header -->
                <div class="px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="bg-blue-100 rounded-full p-2 mr-3">
                                {{ ux_icon('bi:cloud-upload', {class: 'w-5 h-5 text-blue-600'}) }}
                            </div>
                            <h3 class="text-lg font-medium text-gray-900">{{ modalTitle }}</h3>
                        </div>
                        <button
                            type="button"
                            @click="showModal = false"
                            class="text-gray-400 hover:text-gray-600 focus:outline-none"
                        >
                            {{ ux_icon('bi:x-lg', {class: 'w-6 h-6'}) }}
                        </button>
                    </div>
                </div>

                <!-- Modal Body -->
                <div class="px-6 py-4">
                    <!-- Errors -->
                    <div x-show="errors.length > 0" class="mb-4 bg-red-50 border border-red-200 rounded-md p-4">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                {{ ux_icon('bi:exclamation-triangle-fill', {class: 'w-5 h-5 text-red-400'}) }}
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm font-medium text-red-800">Erreurs</h3>
                                <div class="mt-2 text-sm text-red-700">
                                    <ul class="list-disc pl-5 space-y-1">
                                        <template x-for="error in errors" :key="error">
                                            <li x-text="error"></li>
                                        </template>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Dropzone -->
                    <div
                        @dragover="onDragOver"
                        @dragleave="onDragLeave"
                        @drop="onDrop"
                        :class="isDragging ? 'border-blue-500 bg-blue-50' : 'border-gray-300'"
                        class="border-2 border-dashed rounded-lg p-8 text-center transition-colors duration-200"
                    >
                        <div class="space-y-4">
                            <div class="flex justify-center">
                                {{ ux_icon('bi:cloud-arrow-up', {class: 'w-16 h-16 text-gray-400'}) }}
                            </div>
                            <div>
                                <label class="cursor-pointer">
                                    <span class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                                        {{ ux_icon('bi:folder2-open', {class: 'w-4 h-4 mr-2'}) }}
                                        {{ buttonText }}
                                    </span>
                                    <input
                                        type="file"
                                        class="hidden"
                                        @change="onFileSelect"
                                        :multiple="multiple"
                                        accept="{{ acceptedTypes }}"
                                    >
                                </label>
                            </div>
                            <p class="text-sm text-gray-500">ou glissez-déposez vos fichiers ici</p>
                            <p class="text-xs text-gray-400">
                                Types acceptés: {{ acceptedTypes }} • Taille max: {{ maxFileSize }}MB
                            </p>
                        </div>
                    </div>

                    <!-- File List -->
                    <div x-show="files.length > 0" class="mt-4 space-y-2">
                        <h4 class="text-sm font-medium text-gray-900">Fichiers sélectionnés:</h4>
                        <template x-for="(file, index) in files" :key="index">
                            <div class="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                                <div class="flex items-center space-x-3">
                                    {{ ux_icon('bi:file-earmark', {class: 'w-5 h-5 text-gray-400'}) }}
                                    <span class="text-sm text-gray-700" x-text="file.name"></span>
                                    <span class="text-xs text-gray-500" x-text="(file.size / 1024 / 1024).toFixed(2) + ' MB'"></span>
                                </div>
                                <button
                                    type="button"
                                    @click="removeFile(index)"
                                    class="text-red-500 hover:text-red-700"
                                >
                                    {{ ux_icon('bi:trash', {class: 'w-4 h-4'}) }}
                                </button>
                            </div>
                        </template>
                    </div>

                    <!-- Upload Progress -->
                    <div x-show="isUploading" class="mt-4">
                        <div class="flex items-center justify-between mb-2">
                            <span class="text-sm text-gray-700">Upload en cours...</span>
                            <span class="text-sm text-gray-700" x-text="uploadProgress + '%'"></span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div
                                class="bg-blue-600 h-2 rounded-full transition-all duration-300"
                                :style="`width: ${uploadProgress}%`"
                            ></div>
                        </div>
                    </div>
                </div>

                <!-- Modal Footer -->
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button
                        type="button"
                        @click="showModal = false"
                        class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                        {{ ux_icon('bi:x-lg', {class: 'w-4 h-4 mr-2'}) }}
                        Annuler
                    </button>
                    <button
                        type="button"
                        @click="uploadFiles"
                        :disabled="files.length === 0 || isUploading"
                        :class="files.length === 0 || isUploading ? 'opacity-50 cursor-not-allowed' : ''"
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                        {{ ux_icon('bi:cloud-upload', {class: 'w-4 h-4 mr-2'}) }}
                        Uploader
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
