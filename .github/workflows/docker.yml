name: Docker Build & Push

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write

env:
  DOCKER_IMAGE: mkldevops/education
  REGISTRY: docker.io

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}
          tags: |
            # Branch name (for non-main branches)
            type=ref,event=branch,enable=${{ github.ref != 'refs/heads/main' }}
            # PR number (for pull requests)
            type=ref,event=pr
            # SHA (short format)
            type=sha,format=short
            # Latest tag (only for main branch)
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            # Version tags (for semver tags)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: prod
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ github.sha }}

  build-dev-image:
    name: Build Development Image
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: dev
          platforms: linux/amd64
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:dev-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          exit-code: "0"
        continue-on-error: true

      - name: Check if SARIF file exists
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "SARIF file exists, size: $(wc -c < trivy-results.sarif) bytes"
            echo "SARIF_EXISTS=true" >> $GITHUB_ENV
          else
            echo "SARIF file not found"
            echo "SARIF_EXISTS=false" >> $GITHUB_ENV
            ls -la .
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: env.SARIF_EXISTS == 'true'
        with:
          sarif_file: "trivy-results.sarif"

  deploy-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deployment Success Notification
        run: |
          echo "ðŸš€ Docker image successfully built and pushed!"
          echo "ðŸ“¦ Image: ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest"
          echo "ðŸ”– SHA: ${{ github.sha }}"
          echo "ðŸŒŸ Ready for deployment!"
