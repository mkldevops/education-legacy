include:
    # https://docs.gitlab.com/ee/ci/yaml/workflow.html#workflowrules-templates
    -   template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml

image: $CI_REGISTRY_IMAGE/php:8.2-base

before_script:
    - symfony composer install --no-scripts

cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
        - vendor

stages:
    - checks
    - build
    - deploy

checks:vulnerabilities:
    stage: checks
    script :
        - symfony check:security
        - symfony check:requirements
    allow_failure: false

checks:lint:
    stage: checks
    script :
        - symfony console lint:yaml config --parse-tags
        - symfony console lint:twig templates --env=prod
        - symfony console lint:container --no-debug
        - make doctrine-validate c="--env=test"

checks:phpstan:
    stage: checks
    variables: 
        APP_ENV: dev
    script:
        - make cc
        - make stan
    allow_failure: false

checks:php-cs-fixer:
    stage: checks
    script:
        - make cs-dry
    allow_failure: false

checks:phpunit:
    services:
        - mysql:8.0
    stage: checks
    variables:
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: app
        MYSQL_HOST: mysql
    script:
        - symfony console debug:dotenv --env=test
        - make test-report
    allow_failure: true

    artifacts:
        when: always
        reports:
            junit: report.xml

build:app:
    stage: deploy
    image: docker:stable
    services:
        - docker:dind
    variables:
        DOCKER_HOST: tcp://docker:2375
        DOCKER_DRIVER: overlay2
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - docker build --pull 
            -t $CI_REGISTRY_IMAGE/app:$CI_COMMIT_TAG 
            -t $CI_REGISTRY_IMAGE/app:latest .
        - docker push -a $CI_REGISTRY_IMAGE/app
    # rules if is tag
    rules:
        - if: $CI_COMMIT_TAG
          when: always

.deploy:
    image : alpine
    stage: deploy
    before_script :
        - apk add --no-cache openssh-client ca-certificates bash
        - mkdir -p -m 700 ~/.ssh
        - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
        - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa

deploy:prod:
    extends : .deploy
    stage: deploy
    environment:
        name: prod
        url: https://education.msadawaheri.fr
    script:
        - ssh $USER_NAME@$SERVER_NAME "cd j $CI_PROJECT_NAME && git fetch && git checkout $CI_COMMIT_TAG && make build-up && exit"
    rules:
        - if: $CI_COMMIT_TAG
          when: always
